/* ==========================================================================
   RTL Enhancements for Zarmind
   This file adds right-to-left specific tweaks on top of logical CSS.
   It also provides utilities to force LTR for mixed-content fields
   (phone, IBAN, emails, numbers, codes).
   ========================================================================== */

/* Base direction guard (in case a container flips it) */
html[dir="rtl"] body {
  direction: rtl;
  unicode-bidi: plaintext;
}

/* ==========================================================================
   Utilities: force LTR for mixed content
   ========================================================================== */

/* Generic "force LTR" wrapper (use on containers or fields) */
.ltr,
.ltr * {
  direction: ltr !important;
  text-align: left !important;
  unicode-bidi: plaintext;
}

/* Force LTR for specific content types */
.en,
.num,
.code,
.email,
.phone,
.iban,
.card-pan,
.order-no {
  direction: ltr !important;
  text-align: left !important;
  unicode-bidi: plaintext;
}

/* Inputs frequently needing LTR alignment */
input[type="number"],
input[type="tel"],
input[type="email"],
input.en,
input.num,
input.code,
textarea.en {
  direction: ltr !important;
  text-align: left !important;
}

/* Table cells that should align numbers/latin to the left in RTL UIs */
td.num, th.num,
td.en, th.en {
  direction: ltr !important;
  text-align: left !important;
}

/* Code & preformatted content is better LTR */
[dir="rtl"] code,
[dir="rtl"] pre,
[dir="rtl"] .kbd {
  direction: ltr;
  text-align: left;
}

/* ==========================================================================
   Breadcrumb: flip separator for RTL
   ========================================================================== */
[dir="rtl"] .breadcrumb .sep::before {
  content: "‹";
}
html[dir="ltr"] .breadcrumb .sep::before {
  content: "›";
}

/* ==========================================================================
   Icon mirroring helpers
   Use .flip-rtl on icons that should be mirrored when RTL
   ========================================================================== */
[dir="rtl"] .flip-rtl {
  transform: scaleX(-1);
}

/* Common chevrons/arrows (if you use these utility classes on SVGs) */
[dir="rtl"] .chev-left { transform: scaleX(-1); }
[dir="rtl"] .chev-right { transform: none; }

/* ==========================================================================
   Dropdowns & Menus
   (Most are logical already. These ensure edge-alignment in RTL.)
   ========================================================================== */
[dir="rtl"] .dropdown-menu {
  inset-inline-end: 0;
  inset-inline-start: auto;
}

/* Submenu guide line should appear at the right side in RTL (we used logical props in base).
   The rule below is a fallback if any component used physical "left" before. */
[dir="rtl"] .submenu {
  border-inline-start: 2px solid var(--border);
}

/* ==========================================================================
   Tabs (underline style) – keep underline at logical end
   ========================================================================== */
[dir="rtl"] .tabs.underline .tab.active::after {
  inset-inline: 0;
}

/* ==========================================================================
   Drawer (mobile sidebar)
   Our base CSS uses logical positions; this ensures RTL opens from the right.
   ========================================================================== */
[dir="rtl"] .drawer {
  inset-inline-start: auto;
  inset-inline-end: 0;
  transform: translateX(var(--drawer-x, 100%));
}
[dir="rtl"] .drawer.open {
  --drawer-x: 0%;
}

/* ==========================================================================
   Pagination – keep arrows intuitive in RTL
   (If you use glyph classes, flip left chevron while keeping right as-is.)
   ========================================================================== */
[dir="rtl"] .page-btn .chev-left { transform: scaleX(-1); }
[dir="rtl"] .page-btn .chev-right { transform: none; }

/* ==========================================================================
   Data table helpers (numbers & latin)
   ========================================================================== */
[dir="rtl"] .data-table td.num,
[dir="rtl"] .data-table th.num,
[dir="rtl"] .data-table td.en,
[dir="rtl"] .data-table th.en {
  direction: ltr !important;
  text-align: left !important;
}

/* ==========================================================================
   Forms – consistent placeholder/text alignment for numeric/latin fields
   ========================================================================== */
[dir="rtl"] .field .prefix.en,
[dir="rtl"] .field .suffix.en {
  direction: ltr;
  text-align: left;
}

/* ==========================================================================
   Camera / Scanner overlays
   (Nothing to flip by default; this is a placeholder if needed)
   ========================================================================== */
/* [dir="rtl"] .camera-hint { text-align: center; } */

/* ==========================================================================
   Print specifics for RTL (optional)
   ========================================================================== */
/* @media print {
  [dir="rtl"] body { direction: rtl; }
} */

/* End of rtl.css */