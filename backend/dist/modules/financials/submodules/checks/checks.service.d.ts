import { PrismaService } from '../../../../core/database/prisma.service';
import { CreateCheckDto } from './dto/create-check.dto';
import { UpdateCheckDto } from './dto/update-check.dto';
import { UpdateCheckStatusDto } from './dto/update-check-status.dto';
import { CheckType, CheckStatus } from '@zarmind/shared-types';
type PagedResult<T> = {
    items: T[];
    total: number;
    page: number;
    limit: number;
};
export declare class ChecksService {
    private readonly prisma;
    constructor(prisma: PrismaService);
    create(dto: CreateCheckDto): Promise<{
        id: any;
        checkNumber: any;
        type: any;
        status: any;
        amount: number;
        issueDate: any;
        dueDate: any;
        bankName: any;
        branchName: any;
        accountNumber: any;
        issuerName: any;
        customerId: any;
        supplierId: any;
        payeeName: any;
        checkImages: any;
        notes: any;
        depositedDate: any;
        clearedDate: any;
        bouncedDate: any;
        bouncedReason: any;
        createdAt: any;
        updatedAt: any;
    }>;
    findAll(params: {
        page: number;
        limit: number;
        search?: string;
        type?: CheckType;
        status?: CheckStatus;
        fromDueDate?: string;
        toDueDate?: string;
        bankName?: string;
        minAmount?: number;
        maxAmount?: number;
        sortBy?: 'createdAt' | 'dueDate' | 'issueDate' | 'amount';
        sortOrder?: 'asc' | 'desc';
    }): Promise<PagedResult<any>>;
    findOne(id: string): Promise<{
        id: any;
        checkNumber: any;
        type: any;
        status: any;
        amount: number;
        issueDate: any;
        dueDate: any;
        bankName: any;
        branchName: any;
        accountNumber: any;
        issuerName: any;
        customerId: any;
        supplierId: any;
        payeeName: any;
        checkImages: any;
        notes: any;
        depositedDate: any;
        clearedDate: any;
        bouncedDate: any;
        bouncedReason: any;
        createdAt: any;
        updatedAt: any;
    }>;
    update(id: string, dto: UpdateCheckDto): Promise<{
        id: any;
        checkNumber: any;
        type: any;
        status: any;
        amount: number;
        issueDate: any;
        dueDate: any;
        bankName: any;
        branchName: any;
        accountNumber: any;
        issuerName: any;
        customerId: any;
        supplierId: any;
        payeeName: any;
        checkImages: any;
        notes: any;
        depositedDate: any;
        clearedDate: any;
        bouncedDate: any;
        bouncedReason: any;
        createdAt: any;
        updatedAt: any;
    }>;
    updateStatus(id: string, dto: UpdateCheckStatusDto): Promise<{
        id: any;
        checkNumber: any;
        type: any;
        status: any;
        amount: number;
        issueDate: any;
        dueDate: any;
        bankName: any;
        branchName: any;
        accountNumber: any;
        issuerName: any;
        customerId: any;
        supplierId: any;
        payeeName: any;
        checkImages: any;
        notes: any;
        depositedDate: any;
        clearedDate: any;
        bouncedDate: any;
        bouncedReason: any;
        createdAt: any;
        updatedAt: any;
    }>;
    getSummary(type?: CheckType): Promise<{
        type: any;
        byStatus: any;
        upcomingDue: {
            count: any;
            totalAmount: number;
        };
        overdue: {
            count: any;
            totalAmount: number;
        };
    }>;
    remove(id: string): Promise<{
        success: boolean;
        message: string;
    }>;
    private decimalToNumber;
    private mapCheck;
}
export {};
//# sourceMappingURL=checks.service.d.ts.map