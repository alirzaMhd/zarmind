import { PrismaService } from '../../core/database/prisma.service';
import { CreateCustomerDto } from './dto/create-customer.dto';
import { UpdateCustomerDto } from './dto/update-customer.dto';
import { CustomerStatus, CustomerType } from '@zarmind/shared-types';
type PagedResult<T> = {
    items: T[];
    total: number;
    page: number;
    limit: number;
};
export declare class CustomersService {
    private readonly prisma;
    constructor(prisma: PrismaService);
    create(dto: CreateCustomerDto): Promise<{
        id: any;
        code: any;
        type: any;
        status: any;
        firstName: any;
        lastName: any;
        businessName: any;
        phone: any;
        email: any;
        nationalId: any;
        address: any;
        city: any;
        postalCode: any;
        creditLimit: number;
        currentBalance: number;
        notes: any;
        birthDate: any;
        anniversary: any;
        loyaltyPoints: any;
        tags: any;
        createdAt: any;
        updatedAt: any;
    }>;
    findAll(params: {
        page?: number;
        limit?: number;
        search?: string;
        type?: CustomerType;
        status?: CustomerStatus;
        tags?: string[];
        city?: string;
        sortBy?: 'createdAt' | 'updatedAt' | 'firstName' | 'businessName' | 'code';
        sortOrder?: 'asc' | 'desc';
    }): Promise<PagedResult<any>>;
    findOne(id: string): Promise<{
        id: any;
        code: any;
        type: any;
        status: any;
        firstName: any;
        lastName: any;
        businessName: any;
        phone: any;
        email: any;
        nationalId: any;
        address: any;
        city: any;
        postalCode: any;
        creditLimit: number;
        currentBalance: number;
        notes: any;
        birthDate: any;
        anniversary: any;
        loyaltyPoints: any;
        tags: any;
        createdAt: any;
        updatedAt: any;
    }>;
    update(id: string, dto: UpdateCustomerDto): Promise<{
        id: any;
        code: any;
        type: any;
        status: any;
        firstName: any;
        lastName: any;
        businessName: any;
        phone: any;
        email: any;
        nationalId: any;
        address: any;
        city: any;
        postalCode: any;
        creditLimit: number;
        currentBalance: number;
        notes: any;
        birthDate: any;
        anniversary: any;
        loyaltyPoints: any;
        tags: any;
        createdAt: any;
        updatedAt: any;
    }>;
    remove(id: string): Promise<{
        id: any;
        code: any;
        type: any;
        status: any;
        firstName: any;
        lastName: any;
        businessName: any;
        phone: any;
        email: any;
        nationalId: any;
        address: any;
        city: any;
        postalCode: any;
        creditLimit: number;
        currentBalance: number;
        notes: any;
        birthDate: any;
        anniversary: any;
        loyaltyPoints: any;
        tags: any;
        createdAt: any;
        updatedAt: any;
    }>;
    getReceivables(id: string): Promise<any>;
    getSales(id: string): Promise<any>;
    private generateCustomerCode;
    private decimalToNumber;
    private mapCustomer;
}
export {};
//# sourceMappingURL=customers.service.d.ts.map