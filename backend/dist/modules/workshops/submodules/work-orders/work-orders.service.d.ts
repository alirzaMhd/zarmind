import { PrismaService } from '../../../../core/database/prisma.service';
import { CreateWorkOrderDto } from './dto/create-work-order.dto';
import { UpdateWorkOrderDto } from './dto/update-work-order.dto';
import { UpdateStatusDto } from './dto/update-status.dto';
import { TransferWorkOrderDto } from './dto/transfer-work-order.dto';
import { AddImagesDto } from './dto/add-images.dto';
import { UpdateQualityDto } from './dto/update-quality.dto';
import { WorkOrderPriority, WorkOrderStatus } from '@zarmind/shared-types';
type PagedResult<T> = {
    items: T[];
    total: number;
    page: number;
    limit: number;
};
export declare class WorkOrdersService {
    private readonly prisma;
    constructor(prisma: PrismaService);
    create(dto: CreateWorkOrderDto): Promise<{
        id: any;
        orderNumber: any;
        workshopId: any;
        workshop: any;
        productName: any;
        description: any;
        specifications: any;
        quantity: any;
        status: any;
        priority: any;
        orderDate: any;
        startDate: any;
        expectedEndDate: any;
        completedDate: any;
        deliveredDate: any;
        costEstimate: number | null;
        actualCost: number | null;
        goldProvided: number | null;
        stonesProvided: any;
        qualityRating: any;
        qualityNotes: any;
        images: any;
        notes: any;
        createdAt: any;
        updatedAt: any;
    }>;
    findAll(params: {
        page: number;
        limit: number;
        search?: string;
        workshopId?: string;
        status?: WorkOrderStatus;
        priority?: WorkOrderPriority;
        from?: string;
        to?: string;
        minRating?: number;
        maxRating?: number;
        sortBy?: 'createdAt' | 'updatedAt' | 'orderDate' | 'expectedEndDate' | 'status' | 'priority';
        sortOrder?: 'asc' | 'desc';
    }): Promise<PagedResult<any>>;
    findOne(id: string): Promise<{
        id: any;
        orderNumber: any;
        workshopId: any;
        workshop: any;
        productName: any;
        description: any;
        specifications: any;
        quantity: any;
        status: any;
        priority: any;
        orderDate: any;
        startDate: any;
        expectedEndDate: any;
        completedDate: any;
        deliveredDate: any;
        costEstimate: number | null;
        actualCost: number | null;
        goldProvided: number | null;
        stonesProvided: any;
        qualityRating: any;
        qualityNotes: any;
        images: any;
        notes: any;
        createdAt: any;
        updatedAt: any;
    }>;
    update(id: string, dto: UpdateWorkOrderDto): Promise<{
        id: any;
        orderNumber: any;
        workshopId: any;
        workshop: any;
        productName: any;
        description: any;
        specifications: any;
        quantity: any;
        status: any;
        priority: any;
        orderDate: any;
        startDate: any;
        expectedEndDate: any;
        completedDate: any;
        deliveredDate: any;
        costEstimate: number | null;
        actualCost: number | null;
        goldProvided: number | null;
        stonesProvided: any;
        qualityRating: any;
        qualityNotes: any;
        images: any;
        notes: any;
        createdAt: any;
        updatedAt: any;
    }>;
    updateStatus(id: string, dto: UpdateStatusDto): Promise<{
        id: any;
        orderNumber: any;
        workshopId: any;
        workshop: any;
        productName: any;
        description: any;
        specifications: any;
        quantity: any;
        status: any;
        priority: any;
        orderDate: any;
        startDate: any;
        expectedEndDate: any;
        completedDate: any;
        deliveredDate: any;
        costEstimate: number | null;
        actualCost: number | null;
        goldProvided: number | null;
        stonesProvided: any;
        qualityRating: any;
        qualityNotes: any;
        images: any;
        notes: any;
        createdAt: any;
        updatedAt: any;
    }>;
    transfer(id: string, dto: TransferWorkOrderDto): Promise<{
        id: any;
        orderNumber: any;
        workshopId: any;
        workshop: any;
        productName: any;
        description: any;
        specifications: any;
        quantity: any;
        status: any;
        priority: any;
        orderDate: any;
        startDate: any;
        expectedEndDate: any;
        completedDate: any;
        deliveredDate: any;
        costEstimate: number | null;
        actualCost: number | null;
        goldProvided: number | null;
        stonesProvided: any;
        qualityRating: any;
        qualityNotes: any;
        images: any;
        notes: any;
        createdAt: any;
        updatedAt: any;
    }>;
    updateImages(id: string, dto: AddImagesDto): Promise<{
        id: any;
        orderNumber: any;
        workshopId: any;
        workshop: any;
        productName: any;
        description: any;
        specifications: any;
        quantity: any;
        status: any;
        priority: any;
        orderDate: any;
        startDate: any;
        expectedEndDate: any;
        completedDate: any;
        deliveredDate: any;
        costEstimate: number | null;
        actualCost: number | null;
        goldProvided: number | null;
        stonesProvided: any;
        qualityRating: any;
        qualityNotes: any;
        images: any;
        notes: any;
        createdAt: any;
        updatedAt: any;
    }>;
    updateQuality(id: string, dto: UpdateQualityDto): Promise<{
        id: any;
        orderNumber: any;
        workshopId: any;
        workshop: any;
        productName: any;
        description: any;
        specifications: any;
        quantity: any;
        status: any;
        priority: any;
        orderDate: any;
        startDate: any;
        expectedEndDate: any;
        completedDate: any;
        deliveredDate: any;
        costEstimate: number | null;
        actualCost: number | null;
        goldProvided: number | null;
        stonesProvided: any;
        qualityRating: any;
        qualityNotes: any;
        images: any;
        notes: any;
        createdAt: any;
        updatedAt: any;
    }>;
    remove(id: string): Promise<{
        success: boolean;
        message: string;
    }>;
    private generateWorkOrderNumber;
    private decimalToNumber;
    private mapWorkOrder;
}
export {};
//# sourceMappingURL=work-orders.service.d.ts.map