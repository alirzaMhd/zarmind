import { PrismaService } from '../../../../core/database/prisma.service';
import { CreateSaleDto } from './dto/update-sale.dto';
import { UpdateSaleDto } from './dto/update-sale.dto';
import { RecordPaymentDto } from './dto/record-payment.dto';
import { SaleStatus } from '@zarmind/shared-types';
type PagedResult<T> = {
    items: T[];
    total: number;
    page: number;
    limit: number;
};
export declare class SalesService {
    private readonly prisma;
    constructor(prisma: PrismaService);
    create(dto: CreateSaleDto, userId: string): Promise<{
        id: any;
        invoiceNumber: any;
        saleDate: any;
        status: any;
        customerId: any;
        customer: any;
        userId: any;
        user: any;
        branchId: any;
        branch: any;
        subtotal: number;
        taxAmount: number;
        discountAmount: number;
        totalAmount: number;
        paidAmount: number;
        paymentMethod: any;
        notes: any;
        items: any;
        payments: any;
        createdAt: any;
        updatedAt: any;
    }>;
    findAll(params: {
        page: number;
        limit: number;
        search?: string;
        status?: SaleStatus;
        customerId?: string;
        branchId?: string;
        userId?: string;
        from?: string;
        to?: string;
        minAmount?: number;
        maxAmount?: number;
        paymentMethod?: string;
        sortBy?: 'createdAt' | 'updatedAt' | 'saleDate' | 'totalAmount';
        sortOrder?: 'asc' | 'desc';
    }): Promise<PagedResult<any>>;
    findOne(id: string): Promise<{
        id: any;
        invoiceNumber: any;
        saleDate: any;
        status: any;
        customerId: any;
        customer: any;
        userId: any;
        user: any;
        branchId: any;
        branch: any;
        subtotal: number;
        taxAmount: number;
        discountAmount: number;
        totalAmount: number;
        paidAmount: number;
        paymentMethod: any;
        notes: any;
        items: any;
        payments: any;
        createdAt: any;
        updatedAt: any;
    }>;
    findByInvoiceNumber(invoiceNumber: string): Promise<{
        id: any;
        invoiceNumber: any;
        saleDate: any;
        status: any;
        customerId: any;
        customer: any;
        userId: any;
        user: any;
        branchId: any;
        branch: any;
        subtotal: number;
        taxAmount: number;
        discountAmount: number;
        totalAmount: number;
        paidAmount: number;
        paymentMethod: any;
        notes: any;
        items: any;
        payments: any;
        createdAt: any;
        updatedAt: any;
    }>;
    update(id: string, dto: UpdateSaleDto): Promise<{
        id: any;
        invoiceNumber: any;
        saleDate: any;
        status: any;
        customerId: any;
        customer: any;
        userId: any;
        user: any;
        branchId: any;
        branch: any;
        subtotal: number;
        taxAmount: number;
        discountAmount: number;
        totalAmount: number;
        paidAmount: number;
        paymentMethod: any;
        notes: any;
        items: any;
        payments: any;
        createdAt: any;
        updatedAt: any;
    }>;
    recordPayment(id: string, dto: RecordPaymentDto): Promise<{
        success: boolean;
        message: string;
        saleId: string;
        paidAmount: number;
        remainingAmount: number;
        status: SaleStatus;
    }>;
    completeSale(id: string, notes?: string): Promise<{
        success: boolean;
        message: string;
        saleId: string;
        invoiceNumber: any;
    }>;
    cancelSale(id: string, reason: string, notes?: string): Promise<{
        success: boolean;
        message: string;
        saleId: string;
        reason: string;
    }>;
    refundSale(id: string, amount: number, reason: string, notes?: string): Promise<{
        success: boolean;
        message: string;
        saleId: string;
        refundAmount: number;
        reason: string;
        newStatus: SaleStatus;
    }>;
    getSummary(from?: string, to?: string, branchId?: string, userId?: string): Promise<{
        period: {
            from: string;
            to: string;
        };
        totalSales: any;
        totalRevenue: number;
        totalPaid: number;
        totalSubtotal: number;
        totalTax: number;
        totalDiscount: number;
        outstandingAmount: number;
        byStatus: any;
        byPaymentMethod: any;
        topCustomers: any;
        topProducts: any;
    }>;
    remove(id: string): Promise<{
        success: boolean;
        message: string;
    }>;
    private updateInventoryForSale;
    private generateInvoiceNumber;
    private parseDateRange;
    private decimalToNumber;
    private mapSale;
}
export {};
//# sourceMappingURL=sales.service.d.ts.map